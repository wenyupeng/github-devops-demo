# github-devops-demo/.github/workflows/uat-backend-ci.yml

name: UAT Backend CI - Test, Build, and Deploy to UAT

# Trigger the workflow on pushes to the 'uat' branch
on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      build_images_flag:
        description: 'Whether to build Docker images or not'
        required: false
        default: 'false'

  # Automatically on pushes to main branch
  push:
    branches:
      - uat
    paths: # Only trigger if changes are in backend directories
      - 'backend/**'
      - '.github/workflows/uat-backend.yml' # Trigger if this workflow file changes

jobs:
 # Job 1: Run code quality checks and tests for all backend services
  code_quality_checks_and_tests_backends:
    runs-on: ubuntu-latest # Use a GitHub-hosted runner

    services:
      # Customer DB
      customer_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: customers
        ports:
          - 5431:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Order DB
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Product DB container
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        # Make pg_isready available so the service is healthy before tests run
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
      
    steps:
      # 1. Checkout the repository code to the runner
      - name: Checkout repository
        uses: actions/checkout@v4 # Action to check out your repository code

      # 2. Set up Python environment
      - name: Set up Python 3.10
        uses: actions/setup-python@v5 # Action to set up Python environment
        with:
          python-version: '3.10'

      # 3. Statistic code analysis
      - name: Code Quality Checks
        continue-on-error: true # Do not fail the job if linting fails
        run: |
          pip install flake8 bandit
          flake8 backend/customer_service
          bandit -r backend/customer_service
          flake8 backend/order_service
          bandit -r backend/order_service
          flake8 backend/product_service
          bandit -r backend/product_service
    
      # 4. Install dependencies and run code quality checks
      - name: Install dependencies
        run: | # Use a multi-line script to install pip dependencies
          pip install --upgrade pip
          # Loop through each backend service folder
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          # Install CI tools
          pip install pytest httpx

      # 5. Wait for Postgres services to be healthy
      - name: Wait for Postgres to be ready
        run: |
          for port in 5431 5432 5433; do
            until pg_isready -h localhost -p $port -U postgres; do
              echo "Waiting for postgres on port $port..."
              sleep 2
            done
          done

      # 6. Run tests for customer service
      - name: Run customer_service tests
        working-directory: backend/customer_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5431
          POSTGRES_DB: customers
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q

      # 7. Run tests for order service
      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q

      # 8. Run tests for product service
      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q

  # Job 2: Build and Push Docker Images (runs only if tests pass)
  build_and_push_images:
    runs-on: ubuntu-latest
    needs: code_quality_checks_and_tests_backends
    if: ${{ github.event.inputs.build_images_flag == 'true' || github.ref == 'refs/heads/uat' }}

    env:
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      
    steps:
      # 1. Checkout the repository code to the runner
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Azure login using a Service Principal secret
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # Needs to be set as a GitHub Secret (Service Principal JSON)

      # 3. Login to Azure Container Registry (ACR)
      - name: Login to Azure Container Registry
        run: az acr login --name $ACR_LOGIN_SERVER
      
      # 4. Determine next image version based on existing tags in ACR
      - name: Determine next image version
        id: version
        run: |
          # customer service
          if az acr repository show --name $ACR_LOGIN_SERVER --repository customer_service >/dev/null 2>&1; then
            latest_customer=$(az acr repository show-tags --name $ACR_LOGIN_SERVER --repository customer_service --query "sort(@)[-1]" -o tsv)
            latest_customer_version=$(( ${latest_customer#v} + 1 ))
          else
            latest_customer_version=1
          fi
          echo "CUSTOMER_VERSION=v$latest_customer_version" >> $GITHUB_ENV

          # Product service
          if az acr repository show --name $ACR_LOGIN_SERVER --repository product_service >/dev/null 2>&1; then
            latest=$(az acr repository show-tags --name $ACR_LOGIN_SERVER --repository product_service --query "sort(@)[-1]" -o tsv)
            latest_version=$(( ${latest#v} + 1 ))
          else
            latest_version=1
          fi
          echo "PRODUCT_VERSION=v$latest_version" >> $GITHUB_ENV

          # Order service
          if az acr repository show --name $ACR_LOGIN_SERVER --repository order_service >/dev/null 2>&1; then
            latest_order=$(az acr repository show-tags --name $ACR_LOGIN_SERVER --repository order_service --query "sort(@)[-1]" -o tsv)
            latest_order_version=$(( ${latest_order#v} + 1 ))
          else
            latest_order_version=1
          fi
          echo "ORDER_VERSION=v$latest_order_version" >> $GITHUB_ENV

      # 5. Build and Push Docker image for Customer Service
      - name: Build and Push Customer Service Image
        run: |
          docker build -t $ACR_LOGIN_SERVER/customer_service:$CUSTOMER_VERSION ./backend/customer_service/
          docker push $ACR_LOGIN_SERVER/customer_service:$CUSTOMER_VERSION

      # 6. Build and Push Docker image for Product Service
      - name: Build and Push Product Service Image
        run: |
          docker build -t $ACR_LOGIN_SERVER/product_service:$PRODUCT_VERSION ./backend/product_service/
          docker push $ACR_LOGIN_SERVER/product_service:$PRODUCT_VERSION

      # 7. Build and Push Docker image for Order Service
      - name: Build and Push Order Service Image
        run: |
          docker build -t $ACR_LOGIN_SERVER/order_service:$ORDER_VERSION ./backend/order_service/
          docker push $ACR_LOGIN_SERVER/order_service:$ORDER_VERSION

      # 8. Ensure Trivy is installed
      - name: Install Trivy via apt
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh
          sudo mv ./bin/trivy /usr/local/bin/trivy
          trivy --version

      # 9. Run Trivy to analyze images
      - name: Scan images with Trivy
        continue-on-error: true
        run: |
          set -e
          echo "Scanning Customer Service..."
          trivy image --severity HIGH,CRITICAL --ignore-unfixed $ACR_LOGIN_SERVER/customer_service:$CUSTOMER_VERSION > customer_report.txt || true

          echo "Scanning Product Service..."
          trivy image --severity HIGH,CRITICAL --ignore-unfixed $ACR_LOGIN_SERVER/product_service:$PRODUCT_VERSION > product_report.txt || true

          echo "Scanning Order Service..."
          trivy image --severity HIGH,CRITICAL --ignore-unfixed $ACR_LOGIN_SERVER/order_service:$ORDER_VERSION > order_report.txt || true

          # Merge reports
          echo "==== Customer Service ====" > full_report.txt
          cat customer_report.txt >> full_report.txt
          echo "==== Product Service ====" >> full_report.txt
          cat product_report.txt >> full_report.txt
          echo "==== Order Service ====" >> full_report.txt
          cat order_report.txt >> full_report.txt

          # Output merged report
          cat full_report.txt

      # 10. Logout from Azure for security (runs even if image push fails)
      - name: Logout from Azure
        run: az logout
        if: always()
 
  # Job 3: Deploy to Staging Environment
  staging_test_and_deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_images

    steps:
      # 1. Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Azure Login using Service Principal
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      # 3. Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      # 4. Terraform Init (Staging Environment)
      - name: Terraform Init (Staging Environment)
        run: terraform init
        working-directory: terraform/staging

      # 5. Terraform Apply (Provision Staging Environment)
      - name: Terraform Apply (Provision Staging Environment)
        run: terraform apply -auto-approve
        working-directory: terraform/staging

      # 6. Deploy backend Infrastructure to the staging AKS cluster
      - name: Deploy Backend Infrastructure to Staging AKS
        run: |
          az aks get-credentials --resource-group chriswen430-rg --name chriswen430-aks
          kubectl apply -f k8s/configmaps.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/customer-db.yaml
          kubectl apply -f k8s/order-db.yaml
          kubectl apply -f k8s/product-db.yaml

      # 7. Deploy backend microservices to the staging AKS cluster
      - name: Deploy Backend Microservices to Staging AKS
        run: |
          kubectl apply -f k8s/customer-service.yaml
          kubectl apply -f k8s/product-service.yaml
          kubectl apply -f k8s/order-service.yaml

      # 8. Wait for LoadBalancer IPs to be assigned
      - name: Wait for Backend LoadBalancer IPs in Staging
        run: |
          echo "Waiting for Product, Order LoadBalancer IPs to be assigned (up to 5 minutes)..."
          PRODUCT_IP=""
          CUSTOMER_IP=""
          ORDER_IP=""

          for i in $(seq 1 60); do
            echo "Attempt $i/60 to get IPs..."
            CUSTOMER_IP=$(kubectl get service customer-service-task10-3hd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            PRODUCT_IP=$(kubectl get service product-service-task10-3hd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORDER_IP=$(kubectl get service order-service-task10-3hd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

            if [[ -n "$CUSTOMER_IP" && -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "All backend LoadBalancer IPs assigned!"
              echo "Customer Service IP: $CUSTOMER_IP"
              echo "Product Service IP: $PRODUCT_IP"
              echo "Order Service IP: $ORDER_IP"
              break
            fi
            sleep 5 # Wait 5 seconds before next attempt
          done

          if [[ -z "$CUSTOMER_IP" || -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then
            echo "Error: One or more LoadBalancer IPs not assigned after timeout."
            exit 1 # Fail the job if IPs are not obtained
          fi

          # Set environment variables for subsequent steps in the same job
          echo "CUSTOMER_IP=$CUSTOMER_IP" >> $GITHUB_ENV
          echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
          echo "ORDER_IP=$ORDER_IP" >> $GITHUB_ENV

      # 9. Run Simple Acceptance Tests
      - name: Run Simple Acceptance Tests
        run: |
          echo "Running simple acceptance tests against deployed services..."
          echo "Customer Service IP: http://$CUSTOMER_IP:8002"
          for i in $(seq 1 5); do
            if curl -s --head http://$CUSTOMER_IP:8002 | grep "200 OK"; then
              echo "Customer Service is healthy."
              break
            fi
            echo "Waiting for Customer Service to be ready..."
            sleep 5
          done

          echo "Product Service IP: http://$PRODUCT_IP:8000"
          for i in $(seq 1 5); do
            if curl -s --head http://$PRODUCT_IP:8000 | grep "200 OK"; then
              echo "Product Service is healthy."
              break
            fi
            echo "Waiting for Product Service to be ready..."
            sleep 5
          done

          echo "Order Service IP: http://$ORDER_IP:8001"
          for i in $(seq 1 5); do
            if curl -s --head http://$ORDER_IP:8001 | grep "200 OK"; then
              echo "Order Service is healthy."
              break
            fi
            echo "Waiting for Order Service to be ready..."
            sleep 5
          done
          echo "All acceptance tests passed."

      # 10. Terraform Destroy (Clean Up Staging Environment)
      - name: Terraform Destroy (Clean Up Staging Environment)
        if: always()
        run: terraform destroy -auto-approve
        working-directory: terraform/staging

           